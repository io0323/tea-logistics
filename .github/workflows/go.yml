# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tea_logistics_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: postgres
      TEST_DB_NAME: tea_logistics_test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build
      run: go build -v ./...

    - name: Test with Coverage
      run: go test -v -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate Coverage Report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check Coverage Threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        THRESHOLD=15
        # Convert to integer for comparison
        COVERAGE_INT=$(echo $COVERAGE | cut -d. -f1)
        if [ "$COVERAGE_INT" -lt "$THRESHOLD" ]; then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi
